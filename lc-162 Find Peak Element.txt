//revise edge cases !! 
// case 1 when peak is at first element or in the last element, so we manually handle this case
//case 2 when we have the mid element smaller than both left and right element, 
//and we can say that the peak will be on both left of the mid(right = left -1) and right of the mid(left = mid + 1)
class Solution {
    public int findPeakElement(int[] nums) {
        int left =1,right = nums.length-2;
        //case 1
        if(nums.length == 1  ) return 0;
        if(nums[0] > nums[1]) return 0;
        if(nums[nums.length-1] > nums[nums.length-2]) return nums.length-1;
        while(left <= right){
            int mid = left + (right - left)/2;

            if(nums[mid]> nums[mid+1] && nums[mid] > nums[mid-1]){
                return mid;
            }
            else if(nums[mid] > nums[mid-1]){
                left = mid + 1;
            }
            else if(nums[mid] > nums[mid+1]){
                right = mid -1;
            }else{
                //case 2
                //below is to handle important edge case 
                left = mid+1;
            }
        }
        return -1;
    }
}