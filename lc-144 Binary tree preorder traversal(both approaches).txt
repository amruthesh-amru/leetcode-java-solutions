/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    private void preorder(TreeNode node,List<Integer> res){
        if(node == null){
          return;  
        } 
        res.add(node.val);
        preorder(node.left,res);
        preorder(node.right,res);
    }
    private void iterativePreorderApproach(List<Integer> res, TreeNode root){
        Stack<TreeNode> st = new Stack<>();
        if(root == null){
            return ;
        }
        st.push(root);
        while(!st.isEmpty()){
            root = st.pop();
            res.add(root.val);
            
            if(root.right != null){
                st.push(root.right);
            }
            if(root.left != null){
                st.push(root.left);
            }
        }
    }
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        // preorder(root,res);
        iterativePreorderApproach(res,root);
        return res;
    }
}