/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    private void inordertraversal(List<Integer> res,TreeNode node){
        if(node == null){
            return ;
        }
        inordertraversal(res,node.left);
        res.add(node.val);
        inordertraversal(res,node.right);

    }
    private void iterativeInorderApproach(List<Integer> res, TreeNode root){
        Stack<TreeNode> st = new Stack<>();
        TreeNode node = root;
        //think of how recursive appraoch works in order to build iterative appraoach
       while(true){
            if(node != null){
                st.push(node);
                node = node.left;
            }else{
                if(st.isEmpty()){
                    break;
                }
                node = st.pop();
                res.add(node.val);
                node = node.right;
            }
       }
    }
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        // inordertraversal(res,root);
        iterativeInorderApproach(res,root);
        return res;
    }
}