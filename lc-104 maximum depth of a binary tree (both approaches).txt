/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int maxDepth(TreeNode root) {
        //strivers approach, watch video for better understanding
        if(root == null) return 0;

        int left = maxDepth(root.left) ;
        int right = maxDepth(root.right);

        return 1 + Math.max(left,right);



        //Nikhil Lohia  ,this method of finding height uses level order traversal (BFS)
        //  Queue<TreeNode> q = new LinkedList<>();
        // int height = 0;
    
        // if(root == null){
        //     return 0;
        // }
        // q.add(root);
        // while(!q.isEmpty()){
        //     int qSize = q.size();
        //     for(int i=0;i<qSize;i++){
        //         if(q.peek().left != null){
        //             q.add(q.peek().left);
        //         }
        //         if(q.peek().right != null){
        //             q.add(q.peek().right);
        //         }
        //         q.poll();
        //     }
        //    height++;
        // }
        // return height;
    }
}